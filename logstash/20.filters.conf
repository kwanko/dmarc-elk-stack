# vim: syntax=conf tabstop=4 shiftwidth=4 expandtab

filter {
    if "dmarc-report" in [tags] {
        xml {
            source => "message"
            target => "dmarc"
            force_array => false
            remove_field => ["message"]
        }
        ruby { code => 'case event.get("[dmarc][record]") when Array then event.tag("record_to_split") end' }
        if "record_to_split" in [tags] {
            split {
                field => "[dmarc][record]"
                remove_tag => ["record_to_split"]
            }
        }
        mutate {
            convert => {
                "[dmarc][policy_published][pct]" => "integer"
                "[dmarc][record][row][count]" => "integer"
            }
            copy => { "[dmarc][record][row][source_ip]" => "[dmarc][record][row][source_host]" }
            strip => ["[dmarc][report_metadata][date_range][begin]", "[dmarc][report_metadata][date_range][end]"]
        }
        date {
            match => ["[dmarc][report_metadata][date_range][end]", "UNIX", "ISO8601", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"]
            timezone => "UTC"
        }
        date {
            match => ["[dmarc][report_metadata][date_range][begin]", "UNIX", "ISO8601", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"]
            timezone => "UTC"
            target => "[dmarc][report_metadata][date_range][begin]"
        }
        date {
            match => ["[dmarc][report_metadata][date_range][end]", "UNIX", "ISO8601", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"]
            timezone => "UTC"
            target => "[dmarc][report_metadata][date_range][end]"
        }
        dns {
            reverse => "[dmarc][record][row][source_host]"
            action => "replace"
            hit_cache_size => 128
        }
        geoip {
            default_database_type => "City"
            source => "[dmarc][record][row][source_ip]"
        }
        geoip {
            default_database_type => "ASN"
            source => "[dmarc][record][row][source_ip]"
        }
    }
}
